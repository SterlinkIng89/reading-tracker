---
// Header component for Reading Tracker
---

<header
  class="fixed inset-x-0 top-0 bg-gray-900/90 backdrop-blur-md border-b border-gray-700 shadow-lg z-50"
>
  <div
    class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 h-14 flex items-center justify-between"
  >
    <div class="flex items-center space-x-8">
      <a
        href="/"
        class="flex items-center space-x-2 text-lg font-bold text-slate-400 hover:text-slate-300 transition-colors"
      >
        <svg
          class="w-6 h-6 flex-shrink-0"
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path
            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
          ></path>
        </svg>
        <span class="leading-tight">Reading Tracker</span>
      </a>
      <nav class="hidden md:flex space-x-6" aria-label="Primary">
        <a
          href="/dashboard"
          class="text-base font-medium text-gray-300 hover:text-slate-400 transition-colors duration-200 leading-tight"
          >Dashboard</a
        >
      </nav>
    </div>

    <!-- Mobile menu button -->
    <button
      id="mobile-menu-button"
      class="md:hidden p-2 rounded-md text-gray-300 hover:text-gray-100 hover:bg-gray-800 transition-colors"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>

    <div id="header-actions" class="hidden md:flex items-center gap-6">
      <slot name="header-actions">
        <a
          id="signin-link"
          href="/signin"
          class="text-sm font-medium text-slate-400 hover:text-slate-300 transition-colors"
          >Sign in</a
        >
      </slot>
    </div>
  </div>

  <!-- Mobile menu -->
  <div
    id="mobile-menu"
    class="md:hidden hidden bg-gray-900 border-t border-gray-700"
  >
    <div class="px-4 py-3 space-y-3">
      <a
        href="/dashboard"
        class="block text-sm font-medium text-gray-300 hover:text-slate-400 transition-colors"
        >Dashboard</a
      >
      <div id="mobile-actions" class="pt-2 border-t border-gray-700">
        <!-- Mobile actions will be populated by JS -->
      </div>
    </div>
  </div>
</header>

<script type="module">
  // Header logic for authentication and mobile menu
  import apiRoutes from "../../../public/apis/apiRoutes.js";

  const headerActions = document.getElementById("header-actions");
  const mobileActions = document.getElementById("mobile-actions");
  const mobileMenu = document.getElementById("mobile-menu");
  const mobileMenuButton = document.getElementById("mobile-menu-button");

  function clearTokens() {
    localStorage.removeItem("access_token");
    localStorage.removeItem("refresh_token");
  }

  function hasAccess() {
    const t = localStorage.getItem("access_token");
    if (!t) return null;
    try {
      const parts = t.split(".");
      if (parts.length !== 3) return null;
      const payload = JSON.parse(atob(parts[1]));
      if (payload && payload.exp * 1000 > Date.now() + 5000) {
        return payload;
      }
    } catch {
      return null;
    }
    return null;
  }

  function renderHeader() {
    if (!headerActions || !mobileActions) return;
    headerActions.innerHTML = "";
    mobileActions.innerHTML = "";
    const payload = hasAccess();
    const logged = !!payload;
    if (logged) {
      const username = payload.username;
      const userSpan = document.createElement("span");
      userSpan.textContent = `Hola, ${username}`;
      userSpan.className = "text-sm font-medium text-gray-300";
      headerActions.appendChild(userSpan);

      const btn = document.createElement("button");
      btn.textContent = "Sing out";
      btn.className =
        "text-sm font-medium text-red-400 hover:text-red-300 transition-colors";
      btn.addEventListener("click", async () => {
        try {
          const token = localStorage.getItem("access_token");
          const headers = token ? { Authorization: `Bearer ${token}` } : {};
          let res = await fetch(apiRoutes.users.logout, {
            method: "POST",
            credentials: "include",
            headers,
          });
          if (!res.ok) {
            console.debug("Sign out failed status", res.status);
            try {
              // fallback: try without Authorization to ensure cookie deletion
              res = await fetch(apiRoutes.users.logout, {
                method: "POST",
                credentials: "include",
              });
            } catch (e) {
              console.debug("Sign out fallback failed", e);
            }
          }
        } catch (e) {
          console.debug("Sign out request error", e);
        }
        clearTokens();
        window.location.replace("/signin");
      });
      headerActions.appendChild(btn);

      // Mobile version
      const mobileUserSpan = document.createElement("span");
      mobileUserSpan.textContent = `Hola, ${username}`;
      mobileUserSpan.className = "text-sm font-medium text-gray-300 block";
      mobileActions.appendChild(mobileUserSpan);

      const mobileBtn = document.createElement("button");
      mobileBtn.textContent = "Sign out";
      mobileBtn.className =
        "text-sm font-medium text-red-400 hover:text-red-300 transition-colors block mt-2";
      mobileBtn.addEventListener("click", async () => {
        // Same logout logic
        await btn.click();
      });
      mobileActions.appendChild(mobileBtn);
    } else {
      const a = document.createElement("a");
      a.href = "/signin";
      a.className =
        "text-sm font-medium text-slate-400 hover:text-slate-300 transition-colors";
      a.textContent = "Sign in";
      headerActions.appendChild(a);

      // Mobile version
      const mobileA = document.createElement("a");
      mobileA.href = "/signin";
      mobileA.className =
        "text-sm font-medium text-slate-400 hover:text-slate-300 transition-colors block";
      mobileA.textContent = "Sign in";
      mobileActions.appendChild(mobileA);
    }
  }

  // Mobile menu toggle
  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener("click", () => {
      mobileMenu.classList.toggle("hidden");
    });
  }

  renderHeader();
</script>
