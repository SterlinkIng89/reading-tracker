---
// RecentBooks component - Shows recent books with add book card
import BookCard from "./BookCard.astro";
---

<div class="mb-8">
  <h2 class="text-2xl font-bold text-white mb-6">My Books</h2>

  <!-- Books Grid -->
  <div
    class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
    id="books-grid"
  >
    <!-- Add Book Card -->
    <div class="cursor-pointer" id="add-book-card">
      <BookCard title="Add New Book" author="Start Reading" isAddCard={true} />
    </div>

    <!-- Recent Books will be loaded here -->
  </div>
</div>

<script>
  import apiRoutes from "../../../public/apis/apiRoutes";
  import { authFetch } from "../../../public/auth/auth.js";

  // Function to load user's books
  async function loadUserBooks() {
    try {
      const response = await authFetch(apiRoutes.books.library);
      if (!response.ok) throw new Error("Failed to load books");

      const data = await response.json();
      renderBooks(data.books || []);
    } catch (error) {
      console.error("Error loading books:", error);
      // Show error state
      const grid = document.getElementById("books-grid");
      if (grid) {
        const errorDiv = document.createElement("div");
        errorDiv.className = "col-span-full text-center text-red-400 py-8";
        errorDiv.textContent = "Failed to load books. Please try again.";
        grid.appendChild(errorDiv);
      }
    }
  }

  // Function to render books
  function renderBooks(books: any[]) {
    const grid = document.getElementById("books-grid");
    if (!grid) return;

    // Clear existing books (keep the add book card)
    const existingBooks = grid.querySelectorAll(
      ".book-card:not(#add-book-card)"
    );
    existingBooks.forEach((book) => book.remove());

    // Add each book
    books.forEach((book: any) => {
      const bookCard = document.createElement("div");
      bookCard.className = "book-card cursor-pointer";
      bookCard.setAttribute("data-book-id", book.book_id);

      // Create the book card HTML
      bookCard.innerHTML = `
        <div class="bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 border border-gray-700">
          <div class="relative h-48 bg-gray-700 flex items-center justify-center">
            ${
              book.thumbnail
                ? `<img src="${book.thumbnail}" alt="Cover of ${book.title}" class="w-full h-full object-cover" />`
                : `
              <div class="text-center text-gray-400">
                <svg class="w-16 h-16 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                </svg>
                <p class="text-sm">No cover</p>
              </div>
            `
            }

            <div class="absolute top-2 right-2">
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                book.status === "reading"
                  ? "bg-green-900 text-green-300"
                  : book.status === "completed"
                    ? "bg-blue-900 text-blue-300"
                    : "bg-red-900 text-red-300"
              }">
                ${
                  book.status === "reading"
                    ? "üìñ Reading"
                    : book.status === "completed"
                      ? "‚úÖ Completed"
                      : "‚è∏Ô∏è Paused"
                }
              </span>
            </div>
          </div>

          <div class="p-4">
            <h3 class="text-lg font-semibold text-white mb-1 truncate">${escapeHtml(book.title)}</h3>
            <p class="text-sm text-gray-400 mb-2">by ${escapeHtml(book.authors?.join(", ") || "Unknown Author")}</p>

            <div class="mb-3">
              <div class="flex justify-between text-xs text-gray-400 mb-1">
                <span>Progress</span>
                <span>${book.current_page}/${book.total_pages} pages</span>
              </div>
              <div class="w-full bg-gray-700 rounded-full h-2">
                <div class="bg-gradient-to-r from-slate-500 to-slate-600 h-2 rounded-full transition-all duration-300" style="width: ${Math.min((book.current_page / book.total_pages) * 100, 100)}%"></div>
              </div>
            </div>

            <div class="text-xs text-gray-500">
              ${book.last_read_date ? `Last read: ${new Date(book.last_read_date).toLocaleDateString()}` : "Not started yet"}
            </div>
          </div>
        </div>
      `;

      // Add click handler for reading logger
      bookCard.addEventListener("click", () => {
        const bookData = {
          id: book.book_id,
          title: book.title,
          author: book.authors?.join(", ") || "Unknown Author",
          currentPage: book.current_page,
          totalPages: book.total_pages,
        };

        // Open reading logger modal
        if ((window as any).openReadingLogger) {
          (window as any).openReadingLogger(bookData);
        }
      });

      grid.appendChild(bookCard);
    });
  }

  function escapeHtml(unsafe: string) {
    return String(unsafe)
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // Load books when component mounts
  document.addEventListener("DOMContentLoaded", loadUserBooks);

  // Listen for book added event to refresh the list
  window.addEventListener("bookAdded", () => {
    loadUserBooks();
  });

  // Handle book card clicks (for logging) - this is now handled in renderBooks
  // The event listeners are added when books are rendered
</script>
