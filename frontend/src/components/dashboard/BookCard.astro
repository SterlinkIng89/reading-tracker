---
// BookCard component - Individual book card for the dashboard
export interface Props {
  title?: string;
  author?: string;
  coverUrl?: string;
  status?: 'reading' | 'completed' | 'abandoned';
  totalPages?: number;
  currentPage?: number;
  lastReadDate?: string;
  isAddCard?: boolean;
}

const {
  title = 'Unknown Book',
  author = 'Unknown Author',
  coverUrl,
  status = 'reading',
  totalPages = 0,
  currentPage = 0,
  lastReadDate,
  isAddCard = false
} = Astro.props;
---

<div class={`bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 border border-gray-700 ${isAddCard ? '' : 'book-card cursor-pointer'}`}>
  <!-- Book Cover -->
  <div class="relative h-48 bg-gray-700 flex items-center justify-center">
    {coverUrl ? (
      <img
        src={coverUrl}
        alt={`Cover of ${title}`}
        class="w-full h-full object-cover"
      />
    ) : (
      <div class="text-center text-gray-400">
        <svg class="w-16 h-16 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
        </svg>
        <p class="text-sm">No cover</p>
      </div>
    )}

    <!-- Status Badge -->
    <div class="absolute top-2 right-2">
      <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
        status === 'reading' ? 'bg-green-900 text-green-300' :
        status === 'completed' ? 'bg-blue-900 text-blue-300' :
        'bg-red-900 text-red-300'
      }`}>
        {status === 'reading' ? 'üìñ Reading' :
         status === 'completed' ? '‚úÖ Completed' :
         '‚è∏Ô∏è Paused'}
      </span>
    </div>

    <!-- Add Book Overlay (only for add card) -->
    {isAddCard && (
      <div id="add-book-overlay" class="absolute inset-0 bg-slate-600 bg-opacity-90 flex items-center justify-center cursor-pointer">
        <div class="text-center text-white">
          <svg class="w-12 h-12 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          <p class="text-lg font-semibold">Add Book</p>
          <p class="text-sm text-slate-300">Start reading</p>
        </div>
      </div>
    )}
  </div>

  <!-- Book Info -->
  <div class="p-4">
    <h3 class="text-lg font-semibold text-white mb-1 truncate">{title}</h3>
    <p class="text-sm text-gray-400 mb-2">by {author}</p>

    {!isAddCard && (
      <>
        <!-- Progress Bar -->
        <div class="mb-3">
          <div class="flex justify-between text-xs text-gray-400 mb-1">
            <span>Progress</span>
            <span>{currentPage}/{totalPages} pages</span>
          </div>
          <div class="w-full bg-gray-700 rounded-full h-2">
            <div
              class="bg-gradient-to-r from-slate-500 to-slate-600 h-2 rounded-full transition-all duration-300"
              style={`width: ${Math.min((currentPage / totalPages) * 100, 100)}%`}
            ></div>
          </div>
        </div>

        <!-- Last Read -->
        <div class="text-xs text-gray-500">
          Last read: {lastReadDate ? new Date(lastReadDate).toLocaleDateString() : 'Never'}
        </div>
      </>
    )}
  </div>
</div>

<style>
  .book-card:hover {
    transform: translateY(-2px);
  }
</style>

<script type="module">
  import apiRoutes from "../../../public/apis/apiRoutes";
  import { authFetch } from "../../../public/auth/auth.js";
  // Add Book modal + search client-side behavior
  const openBtn = document.getElementById('add-book-overlay');
  if (openBtn) {
    // create modal markup once
    const modal = document.createElement('div');
    modal.id = 'add-book-modal';
    modal.className = 'fixed inset-0 bg-black bg-opacity-60 flex items-start justify-center z-50 p-6';
    modal.style.display = 'none';
    modal.innerHTML = `
      <div class="bg-gray-900 rounded-lg w-full max-w-2xl mx-auto mt-16 overflow-hidden">
        <div class="p-4 border-b border-gray-700 flex justify-between items-center">
          <h3 class="text-lg font-semibold text-white">Search and add books</h3>
          <button id="close-add-modal" class="text-gray-400 hover:text-white">Close</button>
        </div>
        <div class="p-4">
          <input id="book-search-input" class="w-full p-3 rounded bg-gray-800 text-white border border-gray-700" placeholder="Search by title or author..." />
          <div id="search-results" class="mt-4 max-h-64 overflow-auto space-y-2"></div>
        </div>
        <div class="p-4 border-t border-gray-700 flex justify-end gap-2">
          <button id="add-selected" class="bg-indigo-600 disabled:opacity-50 text-white px-4 py-2 rounded" disabled>Add selected</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);

    const closeBtn = modal.querySelector('#close-add-modal');
    const input = modal.querySelector('#book-search-input');
    const resultsEl = modal.querySelector('#search-results');
    const addBtn = modal.querySelector('#add-selected');

    let selected = null;
    let debounceTimer = null;

    function openModal() {
      modal.style.display = 'flex';
      input.value = '';
      resultsEl.innerHTML = '';
      addBtn.disabled = true;
      selected = null;
      input.focus();
    }

    function closeModal() {
      modal.style.display = 'none';
    }

    openBtn.addEventListener('click', openModal);
    closeBtn.addEventListener('click', closeModal);

    // click outside modal content closes it
    modal.addEventListener('click', (e) => {
      if (e.target === modal) closeModal();
    });

    function renderResults(items) {
      resultsEl.innerHTML = '';
      if (!items || items.length === 0) {
        resultsEl.innerHTML = '<p class="text-sm text-gray-400">No results found</p>';
        return;
      }
      items.forEach((it, idx) => {
        const el = document.createElement('div');
        el.className = 'p-3 rounded bg-gray-800 hover:bg-gray-700 cursor-pointer flex gap-3 items-center';
        el.innerHTML = `
          <div class="w-12 h-16 bg-gray-700 flex-shrink-0">
            ${it.thumbnail ? `<img src="${it.thumbnail}" alt="cover" class="w-full h-full object-cover"/>` : '<div class="w-full h-full flex items-center justify-center text-gray-400">No cover</div>'}
          </div>
          <div class="flex-1 text-white">
            <div class="font-semibold">${escapeHtml(it.title || 'Untitled')}</div>
            <div class="text-sm text-gray-400">${escapeHtml((it.authors && it.authors.length > 0) ? it.authors.join(', ') : 'Unknown author')}</div>
          </div>
        `;
        el.addEventListener('click', () => {
          // clear previous selection visual
          resultsEl.querySelectorAll('.selected').forEach(n => n.classList.remove('selected'));
          el.classList.add('selected');
          selected = it;
          addBtn.disabled = false;
        });
        resultsEl.appendChild(el);
      });
    }

    function escapeHtml(unsafe) {
      return String(unsafe)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
    }

    async function bookSearch(q) {
      if (!q || q.trim().length < 2) {
        renderResults([]);
        return;
      }

      console.log(q)
      try {
        const res = await authFetch(`${apiRoutes.books.search}?query=${encodeURIComponent(q)}`);
        if (!res.ok) throw new Error('Search failed');
        const json = await res.json();
        console.log(json)
        renderResults(json.books || []);
      } catch (err) {
        console.error('Book search error', err);
        resultsEl.innerHTML = '<p class="text-sm text-red-500">Error searching books</p>';
      }
    }

    input.addEventListener('input', (e) => {
      const q = e.target.value;
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => bookSearch(q), 300);
    });

    addBtn.addEventListener('click', async () => {
      if (!selected) return;
      try {
        addBtn.disabled = true;
        addBtn.textContent = 'Adding...';
        const res = await authFetch(apiRoutes.books.add, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(selected)
        });
        if (!res.ok) throw new Error('Add failed');
        // close and reload to show new book
        closeModal();
        // Dispatch custom event to refresh book list instead of full reload
        window.dispatchEvent(new CustomEvent('bookAdded'));
      } catch (err) {
        console.error('Add book error', err);
        addBtn.disabled = false;
        addBtn.textContent = 'Add selected';
        alert('Could not add the book. Check the console.');
      }
    });
  }
</script>
